diff --git a/benchmark/GemForgeMicroSuite/omp_conv3d2_unroll_xy/omp_conv3d2_unroll_xy.c b/benchmark/GemForgeMicroSuite/omp_conv3d2_unroll_xy/omp_conv3d2_unroll_xy.c
index 08be1cb..114a35e 100644
--- a/benchmark/GemForgeMicroSuite/omp_conv3d2_unroll_xy/omp_conv3d2_unroll_xy.c
+++ b/benchmark/GemForgeMicroSuite/omp_conv3d2_unroll_xy/omp_conv3d2_unroll_xy.c
@@ -10,6 +10,9 @@
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <sys/time.h>
+#include <string.h>
+#include <time.h>
 
 #include "immintrin.h"
 
@@ -19,8 +22,8 @@ typedef float Value;
 #define CHECK
 #define WARM_CACHE
 
-#define Nx 256
-#define Ny 256
+#define Nx 128 //original 256
+#define Ny 128 //original 256
 #define Ni 16
 #define Nn 64
 #define Kx 3
@@ -43,11 +46,16 @@ float hsum_ps_sse1(__m128 v) { // v = [ D C | B A ]
   return _mm_cvtss_f32(sums);
 }
 
-__attribute__((noinline)) Value foo(Value *I, Value *K, Value *O) {
+inline double sec(struct timeval start, struct timeval end) {
+  return ((double)(((end.tv_sec * 1000000 + end.tv_usec) - (start.tv_sec * 1000000 + start.tv_usec)))) / 1.0e6;
+}
 
-// #pragma clang loop vectorize(disable)
+__attribute__((noinline)) Value foo(Value *I, Value *K, Value *O) {
+struct timeval l_JoinTime;
+double join_time;
 #pragma omp parallel for schedule(static)
   for (uint64_t n = 0; n < Nn; ++n) {
+    size_t l_tid = omp_get_thread_num();
 #define idxK(kx, ky) (n * Kx * Ky * Ni + kx * Kx * Ni + ky * Ni)
     __m512 valK_0_0 = _mm512_load_ps(K + idxK(0, 0));
     __m512 valK_0_1 = _mm512_load_ps(K + idxK(0, 1));
@@ -68,7 +76,7 @@ __attribute__((noinline)) Value foo(Value *I, Value *K, Value *O) {
         for (uint64_t x = 0; x < Bx; ++x) {
           for (uint64_t y = 0; y < By; ++y) {
 
-            const uint64_t idxI = (yy + y) * Nx * Ni + (xx + x) * Ni;
+            uint64_t idxI = (yy + y) * Nx * Ni + (xx + x) * Ni;
             __m512 valI = _mm512_load_ps(I + idxI);
 
 #define localSumPtr(kx, ky) localSum[y + Py - ky][x + Px - kx]
@@ -163,16 +171,19 @@ int main(int argc, char *argv[]) {
 #endif
 #ifdef WARM_CACHE
   // This should warm up the cache.
-  for (long long i = 0; i < sizeI; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
-    volatile Value x = ((uint8_t *)I)[i];
-  }
-  for (long long i = 0; i < sizeK; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
-    volatile Value x = ((uint8_t *)K)[i];
-  }
-  for (long long i = 0; i < sizeO; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
-    volatile Value y = ((uint8_t *)O)[i];
-  }
+  // for (long long i = 0; i < sizeI; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
+  //   volatile Value x = ((uint8_t *)I)[i];
+  // }
+  // for (long long i = 0; i < sizeK; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
+  //   volatile Value x = ((uint8_t *)K)[i];
+  // }
+  // for (long long i = 0; i < sizeO; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
+  //   volatile Value y = ((uint8_t *)O)[i];
+  // }
   // Start the threads.
+  printf("Start warming up cache ...\n");
+  volatile Value temp = foo(I, K, O);
+  printf("Finished cache warmup.\n");
 #pragma omp parallel for schedule(static)
   for (int tid = 0; tid < numThreads; ++tid) {
     volatile Value x = ((uint8_t *)I)[tid];
diff --git a/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c b/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c
index e3120cf..b625461 100644
--- a/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c
+++ b/benchmark/GemForgeMicroSuite/omp_dense_mv_blk/omp_dense_mv_blk.c
@@ -16,11 +16,23 @@ typedef float Value;
 #define CHECK
 #define WARM_CACHE
 
-#define N 256
-#define M 65536
+#define N 32//original 32 //256
+
+#ifdef L2Cache_256kB
+#define M 65536 //24000 //16000 //Original 65536 //Larger 262144
+#endif
+
+#ifdef L2Cache_512kB
+#define M 98304 //24000 //16000 //Original 65536 //Larger 262144
+#endif
+
+#ifdef L2Cache_1024kB
+#define M 196608 //24000 //16000 //Original 65536 //Larger 262144
+#endif
+
 #define Bx 16
 // #define Bx 4
-#define By 4
+#define By 2//original 2 //4
 
 float hsum_ps_sse1(__m128 v) { // v = [ D C | B A ]
   __m128 shuf = _mm_shuffle_ps(v, v, _MM_SHUFFLE(2, 3, 0, 1)); // [ C D | A B ]
@@ -32,21 +44,22 @@ float hsum_ps_sse1(__m128 v) { // v = [ D C | B A ]
 }
 
 __attribute__((noinline)) Value foo(Value *A, Value *B, Value *C) {
+    printf("Execute foo\n");
 // #pragma clang loop vectorize(disable)
 #pragma omp parallel for schedule(static)
   for (uint64_t i = 0; i < N; i += By) {
     Value localSum[By][Bx] = {0};
     for (uint64_t j = 0; j < M; j += Bx) {
 #if Bx == 16
-      __m512 valB = _mm512_load_ps(B + j);
+      __m512 valB = _mm512_load_ps(B + j); //read_shared data
 #elif Bx == 4
       __m128 valB = _mm_load_ps(B + j);
 #endif
       for (uint64_t by = 0; by < By; ++by) {
         uint64_t idxA = (i + by) * M + j;
 #if Bx == 16
-        __m512 valA = _mm512_load_ps(A + idxA);
-        __m512 valC = _mm512_load_ps(localSum[by]);
+        __m512 valA = _mm512_load_ps(A + idxA); //Non-read_shared data
+        __m512 valC = _mm512_load_ps(localSum[by]); //Non-read_shared data
         __m512 valM = _mm512_mul_ps(valA, valB);
         __m512 valS = _mm512_add_ps(valM, valC);
         _mm512_store_ps(localSum[by], valS);
@@ -61,13 +74,13 @@ __attribute__((noinline)) Value foo(Value *A, Value *B, Value *C) {
     }
     for (uint64_t by = 0; by < By; ++by) {
 #if Bx == 16
-      __m512 valS = _mm512_load_ps(localSum[by]);
+      __m512 valS = _mm512_load_ps(localSum[by]); //Non-read_shared data
       Value sum = _mm512_reduce_add_ps(valS);
 #elif Bx == 4
       __m128 valS = _mm_load_ps(localSum[by]);
       Value sum = hsum_ps_sse1(valS);
 #endif
-      C[i + by] = sum;
+      C[i + by] = sum; //Non-read_shared data
     }
   }
   return 0.0f;
@@ -91,13 +104,16 @@ int main(int argc, char *argv[]) {
   Value *B = (Value *)aligned_alloc(CACHE_BLOCK_SIZE, M * sizeof(Value));
   Value *C = (Value *)aligned_alloc(CACHE_BLOCK_SIZE, N * sizeof(Value));
 
+  printf("N: %d, M: %d, By: %d\n", N, M, By);
+  printf("B vector base address: %p and last address: %p\n", B, B+M-1);
+
 #ifdef GEM_FORGE
   m5_detail_sim_start();
 #endif
 
 #ifdef WARM_CACHE
   // This should warm up the cache.
-  for (long long i = 0; i < N * M; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
+  /*for (long long i = 0; i < N * M; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
     volatile Value x = A[i];
   }
   for (long long i = 0; i < M; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
@@ -105,13 +121,15 @@ int main(int argc, char *argv[]) {
   }
   for (long long i = 0; i < N; i += CACHE_BLOCK_SIZE / sizeof(Value)) {
     volatile Value y = C[i];
-  }
+  }*/
+  volatile Value temp = foo(A, B, C);
   // Start the threads.
 #pragma omp parallel for schedule(static)
   for (int tid = 0; tid < numThreads; ++tid) {
     volatile Value x = A[tid];
   }
 #endif
+
 #ifdef GEM_FORGE
   m5_reset_stats(0, 0);
 #endif
@@ -120,6 +138,7 @@ int main(int argc, char *argv[]) {
 #ifdef GEM_FORGE
   m5_detail_sim_end();
   exit(0);
+  return temp + c;
 #endif
 
 #ifdef CHECK
